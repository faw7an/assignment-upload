// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT      // Basic user, can enroll, submit assignments
  ADMIN        // Course Admin: Manages units, assignments, submissions within assigned courses
  SUPER_ADMIN  // System Admin: Manages everything, including courses and users
}


model User {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Role     @default(STUDENT) 
  isVerified   Boolean  @default(false)
  emailToken   String?  @unique
  tokenExpires DateTime?
  resetToken        String?  @unique
  resetTokenExpires DateTime?

  // Relation: A user (student) can make many submissions
  submissions Submission[]
  
  // Relation: A user can be enrolled in many courses
  enrolledCourses UserCourse[]
  
  @@index([email])
  @@index([username])
}


model Unit {
  id          Int      @id @default(autoincrement())
  code        String   @unique 
  name        String   
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relation to a specific course - now mandatory
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  // Relation: A unit can have many assignments
  assignments Assignment[]
  
  @@index([courseId])
}


model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime? 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  unit   Unit @relation(fields: [unitId], references: [id])
  unitId Int

  // Relation: An assignment can have many submissions
  submissions Submission[]

  @@index([unitId]) 
}


model Submission {
  id        Int      @id @default(autoincrement())
  submittedAt DateTime @default(now())
  filePath  String
  fileName  String
  fileType  String?
  //grade     String?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relation: Each submission is made by exactly one user (student)
  student   User @relation(fields: [studentId], references: [id])
  studentId String 

  // Relation: Each submission is for exactly one assignment
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int

  @@index([studentId])
  @@index([assignmentId])
}

// New Course model
model Course {
  id          String    @id @default(uuid())
  name        String
  code        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Many-to-many with User (enrolled students)
  enrolledStudents UserCourse[]
  
  // Direct relationship with units
  courseUnits Unit[]
}

// Join table for User-Course relationship (many-to-many)
model UserCourse {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  enrolledAt DateTime @default(now())
  
  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}